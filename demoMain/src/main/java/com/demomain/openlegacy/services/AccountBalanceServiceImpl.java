package com.demomain.openlegacy.services;

import javax.inject.Inject;

import org.openlegacy.annotations.OpenlegacyDesigntime;
import org.openlegacy.annotations.services.Service;
import org.openlegacy.log.ServiceUsageLogger;
import org.openlegacy.rpc.RpcSession;
import org.openlegacy.rpc.actions.RpcActions;
import org.openlegacy.services.ws.ServiceBinder;
import org.springframework.context.ApplicationContext;

import com.demo.openlegacy.A40212;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test AccountBalanceServiceTest.
 *  The interface AccountBalanceService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relavant screens.
 */
@Service(name = "AccountBalance")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
public class AccountBalanceServiceImpl implements AccountBalanceService {

	private static final String SERVICE_NAME = "AccountBalance";

	@Inject
	private ApplicationContext applicationContext;

	@Inject
	private ServiceUsageLogger serviceLogger;

	@Inject
	private ServiceBinder serviceBinder;

	@Override
	public AccountBalanceOut getAccountBalance(AccountBalanceIn accountBalanceIn) throws Exception {
		long time = System.currentTimeMillis();
		AccountBalanceOut accountBalanceOut = new AccountBalanceOut();
		/* autogenerated - sessions block start*/
		;
		RpcSession demoRpcSession = applicationContext.getBean("demoRpcSession", RpcSession.class);
		/* autogenerated - sessions block end */
		;

		try {
			/* autogenerated - execution block start */;
			A40212 a40212 = serviceBinder.bindInputs("a40212", new A40212(), accountBalanceIn);
			a40212 = demoRpcSession.doAction(RpcActions.EXECUTE(), a40212);
			/* autogenerated - execution block end */;

			/* autogenerated - output block start */;
			accountBalanceOut = serviceBinder.bindOutput(accountBalanceOut, new String[]{"accountBalanceIn", "a40212"}, accountBalanceIn, a40212);
			/* autogenerated - output block end */;

			return accountBalanceOut;
		} catch (Exception e) {
			serviceLogger.error(e, SERVICE_NAME, null);
			throw e;
		} finally {
			time = System.currentTimeMillis() - time;
			/* autogenerated - disconnect block start */
			;
			demoRpcSession.disconnect();
			serviceLogger.log(SERVICE_NAME, time, demoRpcSession.getProperties().getId(), accountBalanceIn, accountBalanceOut, "host");
			/* autogenerated - disconnect block end */
			;
		}
	}

}
